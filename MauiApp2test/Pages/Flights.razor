@page "/flights"

@using assignment2.Data
@using System;
@using System.IO;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;

<h3>Flight Finder</h3>

<form class="findFlights">
    <div>
        <p>From: </p>
        <select id="from" @bind = "param_1">
            @foreach (var airport in GetSortedAirports(GetUniqueAirports("From")))
            {
                <option>@airport</option>
            }
        </select>
    </div>
    <div>
        <p>To: </p>
        <select id="to" @bind ="param_2">
            @foreach (var airport in GetSortedAirports(GetUniqueAirports("To")))
            {
                <option>@airport</option>
            }
        </select>
    </div>

    <div>
        <p>Day: </p>
        <select id="day" @bind = "param_3">
            @foreach (var weekday in weekdays)
            {
                <option>@weekday</option>
            }
        </select>
    </div>

    <p></p>
    <button class="blueButton" @onclick=searchForFlights>Find flights</button>
    <p></p>
    <button class="blueButton" @onclick=test>TEST</button>
</form>

<h3>Flights</h3>
<form class="flights">
    <select id="selectflight" name="flightselector">
        @foreach (var flight in searchedFlights)
        {
            <option value="@flight.flightCode">@flight.flightCode - @flight.airline - @flight.leavingAirport - @flight.destinationAirport - @flight.dayOfweek - @flight.time - @flight.seatNumber - @flight.price</option>

        }
    </select>
</form>

<h3>Reserve</h3>
<form>
    <div>
        <p>Flight Code: </p>
        <input placeholder="Flight" readonly />
    </div>
    <div class="flex-column reserveFlights">
        <p>Airline: </p>
        <input placeholder="Airline" readonly />
    </div>
    <div>
        <p>Day: </p>
        <input placeholder="Day" readonly />
    </div>
    <div>
        <p>Time: </p>
        <input placeholder="Time" readonly />
    </div>
    <div>
        <p>Cost: </p>
        <input placeholder="0" readonly />
    </div>
    <div>
        <p>Name: </p>
        <input placeholder="Name" />
    </div>
    <div>
        <p>Citizenship: </p>
        <input placeholder="Citizenship" />
    </div>
    <div class="reserveButton">
        <button class="blueButton">Reserve</button>
    </div>
</form>
@code
{

    List<Flights1> flights = new List<Flights1>();
    List<string> lines = new List<string>();
    List<string> weekdays = new List<string>() { "Any", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        readingFlightsFile();
    }
    private void readingFlightsFile()
    {
        string fileName = @"C:\Users\adams\source\repos\MauiApp2test\MauiApp2test\Pages\flights.csv";
        //string projectDirectory = Directory.GetCurrentDirectory();
        //string filePath = Path.Combine(projectDirectory, fileName);
        lines = File.ReadAllLines(fileName).ToList();

        foreach (string line in lines)
        {
            string[] items = line.Split(',');
            Flights1 flight = new Flights1(items[0], items[1], items[2], items[3], items[4], items[5], items[6], Convert.ToDouble(items[7]));
            flights.Add(flight);
        }
    }

    string param_1 = string.Empty;
    string param_2 = string.Empty;
    string param_3 = string.Empty;
    List<Flights1> searchedFlights = new List<Flights1>();

    private void searchForFlights()
    {
        searchedFlights.Clear();
        if (param_3 == "Any")
        {
            foreach (var flight in flights)
            {
                if (param_1 == flight.leavingAirport && param_2 == flight.destinationAirport)
                {
                    searchedFlights.Add(flight);
                }
            }
        }
        else
        {
            foreach (var flight in flights)
            {
                if (param_1 == flight.leavingAirport && param_2 == flight.destinationAirport && param_3 == flight.dayOfweek)
                {
                    searchedFlights.Add(flight);
                }
            }
        }


    }

    private List<string> GetUniqueAirports(string airportType)
    {
        List<string> airports = new List<string>();

        foreach (var flight in flights)
        {
            if (airportType == "From")
            {
                if (!airports.Contains(flight.leavingAirport))
                {
                    airports.Add(flight.leavingAirport);
                }
            }
            else if (airportType == "To")
            {
                if (!airports.Contains(flight.destinationAirport))
                {
                    airports.Add(flight.destinationAirport);
                }
            }
        }

        return airports;
    }

    private List<string> GetSortedAirports(List<string> airports)
    {
        return airports.OrderBy(a => a).ToList();
    }


    private void test()
    {
        searchedFlights.Clear();
        foreach (var flight in flights)
        {
            searchedFlights.Add(flight);
        }
    }

}
